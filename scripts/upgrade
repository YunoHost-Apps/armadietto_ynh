#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --weight=1

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
port=$(ynh_app_setting_get --app=$app --key=port)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
datadir=$(ynh_app_setting_get --app=$app --key=datadir)
is_signup=$(ynh_app_setting_get --app=$app --key=is_signup)

#=================================================
# CHECK VERSION
#=================================================
ynh_script_progression --message="Checking version..." --weight=1

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..." --weight=4

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# Restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Stopping a systemd service..." --weight=1

ynh_systemd_action --service_name=$app --action="stop" --log_path="/var/log/$app/$app.log"

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --weight=1

# If is_signup doesn't exist, create it
if [ -z "$is_signup" ]; then
	is_signup="true"
	ynh_app_setting_set --app=$app --key=is_signup --value=$is_signup
fi

# Cleaning legacy permissions
if ynh_legacy_permissions_exists; then
	ynh_legacy_permissions_delete_all
	ynh_app_setting_delete --app=$app --key=is_public
fi

# Remove old log file
ynh_secure_remove --file="/var/log/$app/"

#
# N.B. : the followings setting migrations snippets are provided as *EXAMPLES*
# of what you may want to do in some cases (e.g. a setting was not defined on
# some legacy installs and you therefore want to initiaze stuff during upgrade)
#

# If final_path doesn't exist, create it
#if [ -z "$final_path" ]; then
#	final_path=/var/www/$app
#	ynh_app_setting_set --app=$app --key=final_path --value=$final_path
#fi

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..." --weight=1

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app

#=================================================
# CHECK AND CREATE FINAL_PATH
#=================================================
ynh_script_progression --message="Setting up and create final app path..." --weight=1

ynh_app_setting_set $app final_path $final_path

# Create final_path
mkdir -p "$final_path"

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading dependencies..." --weight=4

ynh_install_nodejs --nodejs_version=$NODEJS_VERSION
ynh_use_nodejs

#=================================================
# SPECIFIC UPGRADE
#=================================================
# CREATE DATA DIRECTORY
#=================================================

if [ -z "$datadir" ]; then
	ynh_script_progression --message="Creating a data directory..." --weight=1

	ynh_app_setting_set --app=$app --key=datadir --value=$datadir

	# Create app data folder
	mkdir -p $datadir
fi

#=================================================
# DEFINE ARMADIETTO OPTIONS & CREATE DATA DIRECTORY
#=================================================
ynh_script_progression --message="Configuring armadietto as a service..." --weight=2

# Define armadietto module path
module_path="$node_version_path/$nodejs_version/lib/node_modules/armadietto/lib"

ynh_add_config --template="../conf/server.js" --destination="$final_path/server.js"

chmod 400 "$final_path/server.js"
chown $app:$app "$final_path/server.js"

#=================================================
# UPGRADE ARMADIETTO
#=================================================
if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrade armadietto with npm..." --weight=1

	pushd $final_path
		ynh_npm -g i armadietto
	popd
fi

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Upgrading systemd configuration..." --weight=3

# Create a dedicated systemd config
ynh_add_systemd_config

#=================================================
# GENERIC FINALIZATION
#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Configuring log rotation..." --weight=2

# Use logrotate to manage application logfile(s)
ynh_use_logrotate

#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================
ynh_script_progression --message="Secure files and directories" --weight=1

# Set permissions to app files
chown -R $app:$app "$final_path"
chmod 0700 "$datadir"
chown $app:$app "$datadir"

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..." --weight=1

yunohost service add $app --description="Armadietto run a remotestorage server as service" --log="/var/log/$app/$app.log"

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..." --weight=2

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# RESTART ARMADIETTO
#=================================================
ynh_script_progression --message="Start armadietto web server..." --weight=1

# Start a systemd service
ynh_systemd_action --service_name=$app --action="start" --log_path="/var/log/$app/$app.log"

#=================================================
# END OF SCRIPT
#=================================================
ynh_script_progression --message="Upgrade of $app completed" --last
